plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'

    id 'maven-publish'

    id "me.modmuss50.mod-publish-plugin" version "0.3.5"
    // https://modmuss50.github.io/mod-publish-plugin/
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    flatDir {
        dirs 'deps'
    }
}

version = rootProject.mod_version

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = 'JitPack'
        url = 'https://jitpack.io'
    }

    // cloth config
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }

    // for sodium
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }

    // for parchment
    maven {
        url = "https://maven.parchmentmc.org"
    }

    // for cardinal components that gravity changer uses
    maven {
        name = 'Ladysnake'
        url = 'https://maven.ladysnake.org/releases'
    }

    // geckolib, for testing with portal gun
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }


}

loom {
    accessWidenerPath = file("src/main/resources/imm_ptl.accesswidener")
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.layered() {
        officialMojangMappings() {
            setNameSyntheticMembers(false)
        }
        parchment("org.parchmentmc.data:parchment-1.21:2024.07.28")
    }

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}") {
        exclude module: "fabric-gametest-api-v1"
        // for now, the gametest module makes client unable to login dev env server
    }

    modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include "me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}"

    modCompileOnly "maven.modrinth:modmenu:${modmenu_version}"
    modLocalRuntime "maven.modrinth:modmenu:${modmenu_version}"

    modCompileOnly "${project.sodium_path}"

    modCompileOnly "${project.iris_path}"

    modCompileOnly("com.github.qouteall:GravityChanger:${gravity_changer_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        transitive(false)
    }

    modApi("com.github.iPortalTeam:DimLib:${dimlib_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include("com.github.iPortalTeam:DimLib:${dimlib_version}")

    // put these into inner mod to reduce duplicate MC jar

    if (project.enable_sodium.equals('true')) {
        modLocalRuntime "${project.sodium_path}"
    }

    if (project.enable_iris.equals('true')) {
        modLocalRuntime "${project.iris_path}"
        implementation "org.anarres:jcpp:1.4.14" // for iris
        implementation 'io.github.douira:glsl-transformer:2.0.0-pre13' // for iris
        implementation 'org.antlr:antlr4-runtime:4.11.1' // for iris
    }

    if (project.enable_gravity_changer.equals('true')) {
        modLocalRuntime("com.github.qouteall:GravityChanger:${gravity_changer_version}") {
            exclude(group: "net.fabricmc.fabric-api")
        }
    }

    if (project.enable_geckolib.equals('true')) {
        // for testing portal gun using dev jar
        modLocalRuntime('software.bernie.geckolib:geckolib-fabric-1.20:4.2') {
            transitive(false)
        }
    }

    if (project.enable_test_mod.equals('true')) {
        fileTree(dir: 'deps', include: '*.jar').each {
            String baseName = it.name.replace(".jar", "")
            String version = "0.1.0"
            int split = baseName.lastIndexOf('-')

            if (split != -1) {
                version = baseName.substring(split + 1)
                baseName = baseName.substring(0, split)
            }

            String name = "testmod:${baseName}:${version}"

            System.out.println("Found test mod: " + it.name.replace(".jar", "") + " -> " + name)

            modImplementation name
        }
    }
    testImplementation(platform('org.junit:junit-bom:5.10.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}


// change the output file name
remapJar {
    afterEvaluate {
        archiveFileName = "${project.archives_base_name}-${project.mod_version}-mc${project.minecraft_version}-fabric.jar"
    }
}


jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

// miscellaneous

task printClasspath {
    doLast {
        // NOTE don't forget to exclude the submod dev jar
        configurations.compileClasspath.each { println "\"" + (it.toString().replace("\\", "/")) + "\"," }
    }
}

// Enable ZGC: -XX:+UseZGC

// run test when building will slow down the build process
// manually run when needed
//test {
//    useJUnitPlatform()
//    testLogging {
//        events "passed", "skipped", "failed"
//    }
//}

publishMods {
    file = remapJar.archiveFile
    changelog = file("changelog.md").text
    type = ALPHA
    modLoaders.add("fabric")

    displayName = "v${project.mod_version}-mc${project.minecraft_version}"
    version = "v${project.mod_version}-mc${project.minecraft_version}"

    curseforge {
        projectId = "332273"
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add(minecraft_version)

        requires {
            slug = "fabric-api"
        }
    }
    modrinth {
        projectId = "zJpHMkdD"
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add(minecraft_version)

        requires {
            slug = "fabric-api"
        }
    }
    github {
        repository = "iPortalTeam/ImmersivePortalsMod"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = "${project.git_branch}"
    }
}